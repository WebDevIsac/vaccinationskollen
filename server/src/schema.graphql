scalar DateTime

type Query {
	getUser: User
	getVaccinations: [Vaccination]
	getUserVaccinations(filter: String, skip: Int, first: Int, orderBy: VaccinationOrderByInput): [UserVaccination]
	getChild(name: String): [Child]
	getChildVaccinations(id: String, filter: String, skip: Int, first: Int, orderBy: VaccinationOrderByInput): [UserVaccination]
	getFamilyVaccinations(filter: String, skip: Int, fist: Int, orderBy: VaccinationOrderByInput): [UserVaccination]
}

enum VaccinationOrderByInput {
	takenAt_ASC
	takenAt_DESC
	createdAt_ASC
	createdAt_DESC
	nextDose_ASC
	nextDose_DESC
	protectUntil_ASC
	protectUntil_DESC
}

type Mutation {
    signup(name: String!, email: String!, password: String!, born: DateTime!): AuthPayload
    login(email: String!, password: String!): AuthPayload
	addUserVaccination(vaccinationId: ID!, takenAt: String, nextDose: String, protectUntil: String): UserVaccination
	addChild(name: String!, born: DateTime!): Child
	addChildVaccination(childId: ID!, vaccinationId: ID!, takenAt: String, nextDose: String, protectUntil: String): UserVaccination
}

type User {
    id: ID!
    name: String!
    email: String!
	born: DateTime!
	vaccinations: [UserVaccination]
	children: [Child]
}

type AuthPayload {
    token: String
    user: User
}

type Child {
	id: ID!
	parent: User!
	name: String!
	born: DateTime!
	vaccinations: [UserVaccination]
}

type Vaccination {
	id: ID!
	name: String!
	dose: Int
	url: String!
	untilNext: String
	protectDuration: String
}

type UserVaccination {
	id: ID!
	user: User!
	child: Child
	type: Vaccination!
	createdAt: DateTime!
	takenAt: String
	nextDose: String
	protectUntil: String
}